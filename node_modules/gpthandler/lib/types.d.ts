type MediaContent = {
    image: string;
};
type TextContent = string;
export type Role = 'user' | 'assistant' | 'system';
export type MessageContent = TextContent | {
    text: TextContent;
    media: MediaContent[];
};
export type Message = {
    role: Role;
    content: MessageContent;
};
export type ChatHistory = Message[];
export type ModelData = {
    method: string;
    model: string;
};
type LlmModelsNameEnum = {
    "OpenAi": {
        gpt4: {
            method: 'OpenAi';
            model: 'gpt-4-1106-preview';
        };
        gpt3_5_t: {
            method: 'OpenAi';
            model: 'gpt-3.5-turbo-1106';
        };
    };
    "G4f": {
        gpt4: {
            method: 'G4f';
            model: 'gpt-4-32k';
        };
        gpt3_5_t: {
            method: 'G4f';
            model: 'gpt-3.5-turbo-16k';
        };
    };
};
export declare const llmModelsEnum: LlmModelsNameEnum;
export interface LlmMethod {
    requestChat(history: ChatHistory, model: string): Promise<LlmAns>;
    translate(text: string, from: string, to: string): Promise<string>;
}
export type ErrorHandlingMode = "as responce text" | "throw error";
export type LlmOptions = {
    retryCount: number;
    llmModel: ModelData;
    errorHandlingMode: ErrorHandlingMode;
};
export type LlmAns = string;
export type Checker = (arg: any) => boolean;
export type TranslationResult = {
    source: {
        code: string;
        lang: string;
    };
    target: {
        code: string;
        lang: string;
    };
    translation: {
        parts: any[];
        result: string;
    };
};
export declare const langCodes: {
    id: string;
    name: string;
}[];
export {};
